scripts:
  # Base scripts - always run
  - name: system_info
    action: run
    content: |
      #!/bin/bash
      echo "System Information:"
      echo "Hostname: $(hostname)"
      echo "User: $USER"
      echo "Distribution: $(lsb_release -d | cut -f2)"
      echo "Kernel: $(uname -r)"
    log: "{{ .User.Home }}/.config/rwr/logs/system_info.log"

  - name: update_system
    action: run
    elevated: true
    content: |
      #!/bin/bash
      echo "Updating package database..."
      pacman -Sy --noconfirm
      echo "System updated successfully"
    log: "{{ .User.Home }}/.config/rwr/logs/system_update.log"

  # Development environment setup
  - name: setup_dev_environment
    profiles:
      - dev
      - work
    action: run
    content: |
      #!/bin/bash
      # Create development directories
      mkdir -p "{{ .User.Home }}/Projects"
      mkdir -p "{{ .User.Home }}/Projects/personal"
      mkdir -p "{{ .User.Home }}/Projects/work"
      mkdir -p "{{ .User.Home }}/.local/bin"

      # Set up development aliases
      echo 'alias ll="ls -alF"' >> "{{ .User.Home }}/.bashrc"
      echo 'alias la="ls -A"' >> "{{ .User.Home }}/.bashrc"
      echo 'alias l="ls -CF"' >> "{{ .User.Home }}/.bashrc"

      echo "Development environment setup complete"
    log: "{{ .User.Home }}/.config/rwr/logs/dev_setup.log"

  # Install development tools from source
  - name: install_nvm
    profiles:
      - dev
      - nodejs
    action: run
    content: |
      #!/bin/bash
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm install --lts
      nvm use --lts
      echo "NVM and latest LTS Node.js installed"
    log: "{{ .User.Home }}/.config/rwr/logs/nvm_install.log"

  # Gaming optimizations
  - name: gaming_optimizations
    profiles:
      - gaming
    action: run
    elevated: true
    content: |
      #!/bin/bash
      # Enable multilib repository
      sed -i '/^#\[multilib\]/,/^#Include = \/etc\/pacman.d\/mirrorlist/ { s/^#//; }' /etc/pacman.conf

      # Update package database
      pacman -Sy --noconfirm

      # Set up gaming group
      groupadd -f gaming
      usermod -a -G gaming "{{ .User.Username }}"

      echo "Gaming optimizations applied"
    log: "{{ .User.Home }}/.config/rwr/logs/gaming_setup.log"

  # Security hardening
  - name: security_setup
    profiles:
      - security
      - work
    action: run
    elevated: true
    content: |
      #!/bin/bash
      # Configure firewall
      systemctl enable ufw
      ufw --force enable
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow ssh

      # Set up fail2ban
      systemctl enable fail2ban
      systemctl start fail2ban

      echo "Basic security setup complete"
    log: "{{ .User.Home }}/.config/rwr/logs/security_setup.log"

  # Database setup
  - name: setup_postgresql_user
    profiles:
      - database
      - dev
    action: run
    elevated: true
    content: |
      #!/bin/bash
      # Create PostgreSQL user
      sudo -u postgres createuser -s "{{ .User.Username }}"
      sudo -u postgres createdb "{{ .User.Username }}"

      echo "PostgreSQL user setup complete"
    log: "{{ .User.Home }}/.config/rwr/logs/postgresql_setup.log"

  # External script execution
  - name: run_custom_setup
    profiles:
      - personal
    action: run
    source: "{{ .User.Home }}/Scripts/personal_setup.sh"
    args: "--user {{ .User.Username }} --home {{ .User.Home }}"
    log: "{{ .User.Home }}/.config/rwr/logs/custom_setup.log"

  # Docker setup for development
  - name: docker_user_setup
    profiles:
      - dev
      - docker
    action: run
    elevated: true
    content: |
      #!/bin/bash
      # Add user to docker group
      usermod -a -G docker "{{ .User.Username }}"

      # Enable and start Docker service
      systemctl enable docker
      systemctl start docker

      echo "Docker user setup complete. Please log out and back in for group changes to take effect."
    log: "{{ .User.Home }}/.config/rwr/logs/docker_setup.log"

  # Cleanup script
  - name: system_cleanup
    profiles:
      - maintenance
    action: run
    elevated: true
    content: |
      #!/bin/bash
      # Clean package cache
      pacman -Sc --noconfirm

      # Clean orphaned packages
      pacman -Rns $(pacman -Qtdq) --noconfirm 2>/dev/null || echo "No orphaned packages found"

      # Clear systemd journal logs older than 30 days
      journalctl --vacuum-time=30d

      echo "System cleanup complete"
    log: "{{ .User.Home }}/.config/rwr/logs/system_cleanup.log"
